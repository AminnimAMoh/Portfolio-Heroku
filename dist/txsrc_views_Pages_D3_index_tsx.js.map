{"version":3,"file":"txsrc_views_Pages_D3_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AAQA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAJA;AADA;;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAOA;AAOA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAUA;AACA;AAMA;AAQA;AACA;;AACA;AACA;AACA;AAAA;AACA;AASA;AAEA;;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAWA;AACA;AAAA;AAEA;AACA;AAFA;AAOA;AACA;AAFA;AAQA;;AAEA","sources":["webpack://andramedian-design/./txsrc/views/Pages/D3/index.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, Selection } from \"d3-selection\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchAnnualrainData,\r\n  fetchSlumsData,\r\n  fetchPopulationData,\r\n  fetchMonthData,\r\n  fetchMap,\r\n} from \"../../../redux/slices/fetchSlice\";\r\nimport { RootState } from \"../../../store\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\ninterface viewBoxSetups {\r\n  mobile: { map: string; UI: string };\r\n  desktop: { map: string; UI: string };\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"relative\",\r\n    \"&> *\": {\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        padding: theme.spacing(6),\r\n      },\r\n      position: \"absolute\",\r\n      top: \"0\",\r\n      left: \"0\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction D3(): React.ReactElement {\r\n  const {\r\n    dataStore: { annualrain, slums, population, months, mapJSON, refresh },\r\n  } = useSelector((state: RootState) => state);\r\n  const classes = useStyle();\r\n  const dispatch = useDispatch();\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const mapSVG = useRef<SVGSVGElement | null>(null);\r\n  const [svgSetupTrigger, setSVGSetupTrigger] = useState<boolean>(false);\r\n  const windowState = useMediaQuery(\"(max-width:600px)\");\r\n  const [viewBoxesSetup, setViewBoxesSrtup] = useState<viewBoxSetups>({\r\n    desktop: { map: \"-1 0 25 25\", UI: \"-140 0 1000 1000\" },\r\n    mobile: { map: \"1.3 0 20 20\", UI: \"-45 0 800 800\" },\r\n  });\r\n\r\n  const [svg, setSvg] = useState<null | Selection<\r\n    SVGSVGElement | null,\r\n    unknown,\r\n    null,\r\n    undefined\r\n  >>(null);\r\n\r\n  const [mapSVGState, setMapSVGState] = useState<null | Selection<\r\n    SVGSVGElement | null,\r\n    unknown,\r\n    null,\r\n    undefined\r\n  >>(null);\r\n\r\n  useEffect(() => {\r\n    if (annualrain.state === \"empty\" || annualrain.state === \"rejected\")\r\n      dispatch(fetchAnnualrainData());\r\n    if (slums.state === \"empty\" || slums.state === \"rejected\")\r\n      dispatch(fetchSlumsData());\r\n    if (population.state === \"empty\" || population.state === \"rejected\")\r\n      dispatch(fetchPopulationData());\r\n    if (months.state === \"empty\" || months.state === \"rejected\")\r\n      dispatch(fetchMonthData());\r\n    if (mapJSON.state === \"empty\" || mapJSON.state === \"rejected\")\r\n      dispatch(fetchMap());\r\n  }, [\r\n    refresh,\r\n    annualrain.state,\r\n    slums.state,\r\n    population.state,\r\n    months.state,\r\n    mapJSON.state,\r\n    dispatch,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    annualrain.state === \"fulfilled\" &&\r\n      slums.state === \"fulfilled\" &&\r\n      population.state === \"fulfilled\" &&\r\n      months.state === \"fulfilled\" &&\r\n      mapJSON.state === \"fulfilled\" &&\r\n      setSVGSetupTrigger(true);\r\n  }, [\r\n    annualrain.state,\r\n    slums.state,\r\n    population.state,\r\n    months.state,\r\n    mapJSON.state,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    !svg && svgSetupTrigger && setSvg(select(svgRef.current));\r\n    if (annualrain.data.length > 0 && svg) {\r\n      import(/* webpackChunkName: 'D3-Draw' */ \"./Draw\").then(\r\n        ({ default: Draw }) => {\r\n          Draw(\r\n            svg,\r\n            svgRef,\r\n            annualrain,\r\n            slums,\r\n            population,\r\n            months,\r\n            mapJSON.data\r\n          );\r\n        }\r\n      );\r\n    }\r\n\r\n    !mapSVGState && svgSetupTrigger && setMapSVGState(select(mapSVG.current));\r\n    if (mapJSON.data && mapSVGState) {\r\n      import(/* webpackChunkName: 'D3-mapSVG' */ \"./MapComponents/Map\").then(\r\n        ({ default: SVGMAP }) => {\r\n          SVGMAP(mapSVGState, mapJSON.data);\r\n        }\r\n      );\r\n    }\r\n  }, [\r\n    svg,\r\n    svgSetupTrigger,\r\n    annualrain,\r\n    slums,\r\n    population,\r\n    months,\r\n    mapJSON,\r\n    mapSVGState,\r\n  ]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <svg\r\n        ref={mapSVG}\r\n        viewBox={\r\n          windowState ? viewBoxesSetup.mobile.map : viewBoxesSetup.desktop.map\r\n        }\r\n      />\r\n      <svg\r\n        ref={svgRef}\r\n        viewBox={\r\n          windowState ? viewBoxesSetup.mobile.UI : viewBoxesSetup.desktop.UI\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default D3;\r\n"],"names":[],"sourceRoot":""}