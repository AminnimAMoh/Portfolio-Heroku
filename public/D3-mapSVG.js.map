{"version":3,"file":"D3-mapSVG.js","mappings":";;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sources":["webpack://andramedian-design/./txsrc/views/Pages/D3/MapComponents/Map.js","webpack://andramedian-design/./txsrc/views/Pages/D3/utilities.js"],"sourcesContent":["import {\r\n    geoLocations,\r\n  } from \"../utilities\";\r\n\r\nconst SVGMAP=(container, data)=>{\r\n    const mapContainer=container.append(\"g\")\r\n    .attr(\"id\", \"mapContainer\")\r\n    .attr('transform', \"translate(-710,-175)\");\r\n\r\n    let names = [];\r\n    if (data) {\r\n      for (let i = 0; i < data.features.length; i++) {\r\n        names.push(data.features[i].properties.NAME_4);\r\n      }\r\n      mapContainer\r\n        .selectAll(\"path\")\r\n        .data(data.features)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"d\", (d) => geoLocations(d));\r\n    }\r\n}\r\n\r\nexport default SVGMAP","import * as d3 from \"d3\";\r\n\r\nexport const findMinMax = (data) => {\r\n  const firstMin = d3.min(data);\r\n  const firstMax = d3.max(data);\r\n  return [firstMin, firstMax];\r\n};\r\n\r\nexport const onClickTextFunction = (d, yearsContainer) => {\r\n  yearsContainer\r\n    .selectAll(\"text\")\r\n    .attr(\"font-size\", 12)\r\n    .style(\"fill\", \"white\")\r\n\r\n  d3.select(d)\r\n    .attr(\"font-size\", 24)\r\n    .style(\"fill\", \"#9C3C41\")\r\n};\r\n\r\nexport const slumScale = (data,slums) => {\r\n  const scale=d3.scaleLinear()\r\n    .domain([slums.data[0].min, slums.data[0].max])\r\n    .range([20, 100]);\r\n  return scale(data)\r\n};\r\n\r\nexport const geoLocations=(data)=>{\r\n  const projection = d3.geoEquirectangular();\r\n\r\n  const geoGenerator = d3.geoPath().projection(projection);\r\n\r\n  return geoGenerator(data)\r\n}\r\n\r\nexport const citiesProjection=(data)=>{\r\n  const projectionTest = d3\r\n    .geoEquirectangular()\r\n    .scale(5760)\r\n    .translate([-8650, 2860]);\r\n    return projectionTest(data)\r\n}\r\n\r\nexport const angleScale=(data)=>{\r\n  const angleScale = d3\r\n  .scaleLinear()\r\n  .domain([0, 4])\r\n  .range([0, Math.PI * 2]);\r\n  return angleScale(data)\r\n}"],"names":[],"sourceRoot":""}